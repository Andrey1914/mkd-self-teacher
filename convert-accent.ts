import fs from "fs";
import path from "path";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã Unicode –≤ —Ñ–∞–π–ª–µ
function replaceUnicodeInFile(filePath: string): number {
  try {
    const content = fs.readFileSync(filePath, "utf8");

    // –ó–∞–º–µ–Ω—è–µ–º \u0301 –Ω–∞ *
    const updatedContent = content.replace(/\\u0301/g, "*");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if (content !== updatedContent) {
      fs.writeFileSync(filePath, updatedContent, "utf8");

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ–Ω
      const matches = content.match(/\\u0301/g);
      // const count = matches ? matches.length : 0;

      // console.log(
      //   `‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: ${path.relative(
      //     process.cwd(),
      //     filePath
      //   )} (${count} –∑–∞–º–µ–Ω)`
      // );
      // return count;
      return matches ? matches.length : 0;
    }

    return 0;
  } catch (error) {
    console.error(
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${filePath}:`,
      (error as Error).message
    );
    // return 0;
    return -1;
  }
}

//----------------------------------------------------------------
// --- –ù–û–í–û–ï –†–ï–®–ï–ù–ò–ï 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ ---
function updateDirectory(): void {
  console.log("‚ôªÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...");

  // ‚úÖ ‚úÖ ‚úÖ –ù–ê–°–¢–†–û–ô–ö–ò: ‚úÖ ‚úÖ ‚úÖ
  const targetDirectory = "prisma/lessons/vocabulary"; // –ü–∞–ø–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  const allowedExtensions = [".ts", ".tsx", ".js", ".jsx"]; // –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const ignoredFolders = ["node_modules", ".git", "dist", "build"]; // –ü–∞–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å

  const projectRoot = process.cwd();
  const fullPathToDirectory = path.join(projectRoot, targetDirectory);
  let totalReplacements = 0;
  let filesProcessed = 0;

  function traverseDirectory(currentPath: string) {
    const entries = fs.readdirSync(currentPath, { withFileTypes: true });

    for (const entry of entries) {
      const entryPath = path.join(currentPath, entry.name);
      if (entry.isDirectory()) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –ø–∞–ø–∫–∏
        if (!ignoredFolders.includes(entry.name)) {
          traverseDirectory(entryPath);
        }
      } else if (allowedExtensions.includes(path.extname(entry.name))) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã —Å –Ω—É–∂–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
        const replacements = replaceUnicodeInFile(entryPath);

        if (replacements > 0) {
          // –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –±—ã–ª–∏ –∑–∞–º–µ–Ω—ã
          console.log(
            `‚ôªÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω: ${path.relative(
              projectRoot,
              entryPath
            )} (${replacements} –∑–∞–º–µ–Ω)`
          );
          totalReplacements += replacements;
        } else if (replacements === 0) {
          // –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ñ–∞–π–ª –ø—Ä–æ–≤–µ—Ä–µ–Ω, –Ω–æ –∑–∞–º–µ–Ω –Ω–µ—Ç
          console.log(
            `‚úîÔ∏è –ü—Ä–æ–≤–µ—Ä–µ–Ω: ${path.relative(
              projectRoot,
              entryPath
            )} (–∑–∞–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)`
          );
        }
        // –ï—Å–ª–∏ replacements < 0, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —É–∂–µ –≤—ã–≤–µ–ª–æ—Å—å –∏–∑ `replaceUnicodeInFile`

        if (replacements >= 0) {
          filesProcessed++;
        }
        // totalReplacements += replaceUnicodeInFile(entryPath);
        // filesProcessed++;
      }
    }
  }

  if (fs.existsSync(fullPathToDirectory)) {
    traverseDirectory(fullPathToDirectory);
    console.log("\nüéâ –ì–æ—Ç–æ–≤–æ! –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
    console.log(`üìÇ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${filesProcessed}`);
    console.log(`üìä –í—Å–µ–≥–æ –∑–∞–º–µ–Ω–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: ${totalReplacements}`);
  } else {
    console.error(`‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${fullPathToDirectory}`);
  }
}

updateDirectory();
//--------------------------------------------------------------

//--------------------------------------------------------------
// --- –ù–û–í–û–ï –†–ï–®–ï–ù–ò–ï 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ —Å–ø–∏—Å–∫—É ---
// function updateMultipleFiles(): void {
//   console.log("‚ôªÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞...");

//   const projectRoot = process.cwd();
//   let totalReplacements = 0;
//   let filesProcessed = 0;

//   // ‚úÖ ‚úÖ ‚úÖ –ó–î–ï–°–¨ –£–ö–ê–ñ–ò–¢–ï –°–ü–ò–°–û–ö –§–ê–ô–õ–û–í: ‚úÖ ‚úÖ ‚úÖ
//   const filesToUpdate = [
//     "prisma/lessons/exercises/lesson-1/exercise-1.ts",
//     "prisma/lessons/exercises/lesson-1/exercise-2.ts",
//     // –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å—Ç–æ–ª—å–∫–æ –ø—É—Ç–µ–π, —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ
//   ];

//   for (const relativePath of filesToUpdate) {
//     const fullPath = path.join(projectRoot, relativePath);

//     if (fs.existsSync(fullPath)) {
//       const replacements = replaceUnicodeInFile(fullPath);

//       if (replacements > 0) {
//         console.log(`‚ôªÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω: ${relativePath} (${replacements} –∑–∞–º–µ–Ω)`);
//         totalReplacements += replacements;
//       } else if (replacements === 0) {
//         // –í–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ —Ö–≤–∞—Ç–∞–ª–æ!
//         console.log(`‚úîÔ∏è –ü—Ä–æ–≤–µ—Ä–µ–Ω: ${relativePath} (–∑–∞–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)`);
//       }
//       // –ï—Å–ª–∏ replacements < 0, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —É–∂–µ –±—ã–ª–æ –≤—ã–≤–µ–¥–µ–Ω–æ

//       filesProcessed++;
//     } else {
//       console.error(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—â–µ–Ω: ${relativePath}`);
//     }
//   }

//   console.log("\nüéâ –ì–æ—Ç–æ–≤–æ! –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
//   console.log(`üìÇ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${filesProcessed}`);
//   console.log(`üìä –í—Å–µ–≥–æ –∑–∞–º–µ–Ω–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: ${totalReplacements}`);
// }

// updateMultipleFiles();
//-----------------------------------------------------------------------------

//------------------------------------------------------------------------------
// –§–£–ù–ö–¶–ò–Ø - –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
// function updateSingleFile(): void {
//   console.log("‚ôªÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...");

//   const projectRoot = process.cwd();

//   // ‚úÖ ‚úÖ ‚úÖ –ó–î–ï–°–¨ –£–ö–ê–ñ–ò–¢–ï –ü–£–¢–¨ –ö –í–ê–®–ï–ú–£ –§–ê–ô–õ–£: ‚úÖ ‚úÖ ‚úÖ
//   const updateFilePath = path.join(
//     projectRoot,
//     "prisma/lessons/dialogues/lesson-5/dialogueBlock.ts"
//   );

//   // üìù –ü–†–ò–ú–ï–†–´ –î–†–£–ì–ò–• –ü–£–¢–ï–ô:
//   // const updateFilePath = path.join(projectRoot, "prisma/lessons/lesson-1.ts")
//   // const updateFilePath = path.join(projectRoot, "src/data/exercise-data.ts")
//   // const updateFilePath = path.join(projectRoot, "components/my-component.tsx")

//   // üìù –ò–õ–ò –ú–û–ñ–ù–û –£–ö–ê–ó–ê–¢–¨ –ü–†–û–°–¢–û –°–¢–†–û–ö–û–ô:
//   // const updateFilePath = "prisma/lessons/exercises/lesson-5.ts"

//   if (fs.existsSync(updateFilePath)) {
//     console.log(
//       `üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: ${path.relative(projectRoot, updateFilePath)}`
//     );

//     const replacements = replaceUnicodeInFile(updateFilePath);

//     console.log("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞:");
//     console.log(` ‚úîÔ∏è  –§–∞–π–ª: ${path.relative(projectRoot, updateFilePath)}`);
//     console.log(` ‚úîÔ∏è  –ó–∞–º–µ–Ω: ${replacements}`);

//     if (replacements > 0) {
//       console.log("üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω—ã! –ó–∞–º–µ–Ω—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!");
//     } else {
//       console.log("‚ÑπÔ∏è  Unicode —Å–∏–º–≤–æ–ª—ã \\u0301 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ");
//     }
//   } else {
//     console.error(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${updateFilePath}`);
//     console.log("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É");
//     console.log(`üí° –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${projectRoot}`);
//   }
// }

// updateSingleFile();
//------------------------------------------------------------------------------
